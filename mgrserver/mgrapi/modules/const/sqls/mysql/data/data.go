// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package data generated by go-bindata.// sources:
// out/mysql/data/data.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outMysqlDataDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\xcf\x8b\xe4\x44\x14\xc7\xef\x82\xff\x43\xdd\x4a\x21\xe9\xae\x57\x95\xa4\x92\x78\x5a\x75\x06\x16\x86\x11\xdc\x5d\xaf\x43\xa5\x52\xdd\x9b\x9d\xee\xa4\x4d\x65\x96\x69\xf0\xb2\x2c\x88\x7a\x1a\x65\x10\x15\x74\xd1\x83\xee\x69\x14\x3d\x88\x2c\xe2\x3f\x63\x4f\xcf\xfe\x17\x4b\x25\xe9\xa4\x7b\xfa\x07\x69\xa6\x69\xd2\x45\xba\xea\xf3\x5e\x7d\xdf\xab\x57\xef\xfe\xf1\x83\x83\x8f\x1f\xa2\xfb\xc7\x0f\x3f\x42\x71\xac\x4f\xe2\x44\x16\x49\x96\x8a\x7c\x7a\x92\xa4\x83\x0c\x7d\x72\xef\xe8\xd1\xc1\x03\xf4\x0e\x58\x08\x5f\x7f\xfb\xc7\xec\x97\x9f\xf0\xca\x28\x9b\xa8\x5c\x14\xea\x44\x94\xcb\xb0\x85\x88\x85\xc8\xbb\xef\xbd\xfd\x56\x57\x30\xb5\x10\xfe\xff\xbf\xab\xeb\xcb\x7f\xf0\xca\xe8\xce\x60\x66\x21\x3c\xbb\xf8\x7d\x7e\xf9\x12\xaf\x8c\xee\x0c\x76\x2c\x84\xe7\xbf\x3e\xab\x71\xed\xe8\xce\x60\xd7\x42\xf8\xf5\xe5\xb3\xd9\xd5\x0f\x78\x65\xd4\x09\xac\x75\x76\x92\x67\x23\xb5\x1e\xb6\xf9\xd5\xcf\xf3\x8b\xcf\x67\x5f\x7f\x57\xad\xc4\x94\x80\x6f\x7b\x36\xe5\x88\xb0\x90\x78\xa1\xeb\xe0\xad\xb0\xb1\x4a\xcf\xda\x50\x71\xcf\xb3\x10\x2c\x7d\x0d\x2b\xb0\x81\xda\xc0\x11\x38\x21\x83\x90\x31\x6c\x21\xe8\xcc\xe3\x0d\x6c\x27\x90\x76\x06\xfa\x2d\x70\x27\x91\x75\x26\x06\x0d\xd1\x01\x4a\x76\x31\x9d\xae\x4c\x4e\x96\x99\x3b\xfd\x74\x3b\x33\xdb\xb8\x38\xb4\xd6\x75\x0b\xd3\xeb\xcc\xa4\xad\x9a\x74\x17\x91\x77\x26\xb2\x86\xb8\x13\xe8\x77\x06\x3a\x2d\x70\xa7\x90\xc1\x26\xa2\x9e\xea\x42\x8d\x37\x1c\x99\xcb\x97\xd7\x5f\xfc\x7d\xfd\xe3\xf3\xd7\xdf\x5f\xcc\xff\x7a\x35\x7f\xf5\xc2\x9c\xc3\xc7\x45\x31\x09\xfb\x7d\xad\xb3\xa7\x4e\x0f\x08\x89\xc6\xa4\x27\xb3\x71\xe8\x79\x9c\x9b\xb7\x52\x8c\x46\x91\x90\xa7\xb8\xf4\x83\x11\x42\xda\x45\xd1\x93\x5e\x32\x16\x43\xa5\x7b\x32\xfe\x74\x7a\xfa\xa4\x27\x53\xb3\xa4\xef\xc8\x18\x3c\x01\x91\x1b\x31\x4f\xc8\xc0\x27\x1c\x98\x54\xd4\x95\x4c\x72\x11\x91\x41\x6f\x92\x0e\x8d\xed\x68\x68\xc7\x22\x1d\xaa\xfc\xb3\x5b\xa3\xfc\x14\x99\x47\xfd\xce\x4c\x15\x93\x89\xfd\x58\x89\x58\xe5\xf6\x20\x39\x57\xb1\x79\xa7\x75\x66\x7e\xfa\x67\x5a\xe5\xfd\x24\x8d\xd5\x79\x5d\x0c\xde\x07\xea\x1f\x72\x1e\x7c\xe8\x72\x07\x0e\x38\x81\x80\x32\xe6\x78\x87\xfc\xf0\x5e\x70\x18\xb8\x1f\x6c\x2c\x0d\xb5\x6c\x2b\xa1\xb8\x2d\x5b\xc5\xaf\x43\x62\xe3\xfa\x01\x4b\xf5\x27\x40\x00\xa6\xfe\x00\x31\x27\x7c\x4b\xd5\xd8\x68\xaa\xb5\x75\xf3\xdb\x37\x37\x5f\xfe\x89\x17\x86\xcc\x65\x32\x10\x68\x20\x6c\xb3\x51\x8d\x0a\x75\x5e\xd8\x26\xba\x6b\xf6\xb9\x0d\x0c\x11\x1a\x12\x1e\x32\xd8\xd7\xbe\x31\x53\xa5\xc5\xec\xab\x17\x37\xcf\xff\xdd\x60\xbf\x10\xfa\x74\xc9\xbe\x3d\x2a\xaa\xe0\xdc\x16\xc1\x47\x40\x4a\x11\x02\x53\x94\xf6\x12\xa1\x55\xa1\xaa\xf0\xb8\xa9\xa2\x6c\x45\x06\x5b\x26\xb9\x1c\xa9\xca\x99\x49\x9e\x8c\x45\x3e\x5d\x4f\x86\x4d\x4e\xb1\xa0\xde\x59\x77\xa7\x8c\x02\x55\x50\x9a\x34\xd8\xe8\x54\xad\x4d\x9b\xb5\x95\x37\xe6\x88\x6f\x71\xc6\xa5\x7b\x87\x09\x9a\x38\xb5\x0a\xd1\x5b\xce\xa8\xf4\xa9\x1a\x65\x93\x5a\x1e\x7d\x26\xa5\xd2\xba\x74\x48\x4f\xf5\x36\x75\xca\xbc\x25\x6c\x5f\x75\xaa\x0b\xa4\xed\x9e\x16\x77\x94\xe9\x28\x50\x79\x74\xe3\x18\x2f\x17\x31\xb0\xc1\x41\x40\x43\xc7\x0b\x09\x54\xff\x1c\x3f\x3a\x3a\xda\xc7\x20\x2c\x77\x55\x6b\x06\xc7\x59\x9c\x0c\xa6\xdb\x6c\x82\x5b\x49\xbe\x9f\xcd\xf2\xf6\xa9\x1b\xae\x7e\xd3\x1e\xad\x99\x36\x00\x13\xf3\x93\x38\xd1\x22\x1a\xa9\xd5\x9d\x2f\xca\x37\xf0\x90\xb9\xd5\xd1\xd8\xe6\x45\x09\xd9\xd9\xf5\xe0\xe1\x99\x48\x47\x65\xd2\x2b\x20\x22\x96\x2c\x70\x82\x48\xb8\x81\x88\x22\xe5\x7a\x8a\xb8\x7c\x40\xc9\xc0\xf7\x99\x6a\x66\x27\x55\x85\xef\xc9\xba\xe1\xc2\x40\xea\x8f\x99\x82\x17\xf9\x10\xd8\x94\x20\xe2\x86\x24\xa8\x22\xe4\x78\xdc\xf7\x9d\x66\x06\x25\x66\x2b\x8c\x98\x1c\x06\x2f\x04\x7f\xb1\x78\x63\x5d\x2d\x77\x62\x8e\x40\x7b\xc1\x79\x2c\x58\x6e\xb9\xcc\xaa\x37\x01\x00\x00\xff\xff\xba\x4e\x0c\x64\xb3\x0b\x00\x00")

func outMysqlDataDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_outMysqlDataDataSql,
		"out/mysql/data/data.sql",
	)
}

func outMysqlDataDataSql() (*asset, error) {
	bytes, err := outMysqlDataDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out/mysql/data/data.sql", size: 2995, mode: os.FileMode(420), modTime: time.Unix(1609394494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out/mysql/data/data.sql": outMysqlDataDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out": &bintree{nil, map[string]*bintree{
		"mysql": &bintree{nil, map[string]*bintree{
			"data": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{outMysqlDataDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
