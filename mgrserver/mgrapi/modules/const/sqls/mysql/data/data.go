// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package data generated by go-bindata.// sources:
// out/mysql/data/data.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outMysqlDataDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xcf\x8b\x23\x45\x14\xc7\xef\x82\xff\x43\xdd\x4a\x25\x9d\xd4\xaf\xee\xea\x6a\x4f\xab\xce\xc0\xc2\x30\x82\xbb\xeb\x35\x54\x57\x57\xb2\xbd\x93\x74\xc7\xae\x9e\x65\x02\x5e\x96\x05\x51\x4f\xa3\x0c\xa2\x82\x2e\x7a\xd0\x3d\x8d\xa2\x07\x91\x45\xfc\x67\xcc\x64\xf6\xbf\x90\x4a\xff\x98\x24\xd3\x69\x3a\x30\xc3\xd0\x5d\x74\xea\x7d\xbe\xaf\xde\xab\xf7\xaa\xee\x1f\x3f\x38\xf8\xe8\x21\xb8\x7f\xfc\xf0\x43\x10\x45\x66\x18\xc5\x2a\x8f\xd3\x44\x66\xf3\x61\x9c\x8c\x52\xf0\xf1\xbd\xa3\x47\x07\x0f\xc0\x5b\xb8\x07\xe0\xd5\x37\xbf\x2f\x7e\xfe\x11\x6e\x8c\xd2\x99\xce\x64\xae\x87\x72\x65\x06\x7b\x00\xf5\xe0\x3b\xf6\xf5\xf6\xbb\x6f\xbe\xd1\x15\x4e\x7a\x00\xfe\xf7\xef\xe5\xd5\xc5\xdf\x70\x63\x74\x27\x70\xda\x03\x70\x71\xfe\xdb\xf2\xe2\x25\xdc\x18\xdd\x09\x9c\xf5\x00\x5c\xfe\xf2\xac\x44\xde\x8c\xee\x04\xee\xf6\x00\x7c\x7d\xf1\x6c\x71\xf9\x3d\xdc\x18\x75\x86\x1b\x93\x0e\xb3\x74\xa2\x6f\xa7\x72\x79\xf9\xd3\xf2\xfc\xb3\xc5\x57\xdf\xae\xac\x01\x24\x08\xfb\x8e\xe7\x10\x0e\x10\x0d\x90\x17\xb8\x0c\xee\x84\x4d\x75\x72\xba\x0e\x5b\xff\xb7\x20\xe1\x60\xe2\x60\x0e\x30\x0b\x28\x0e\x28\x85\x3d\x80\xbb\xc1\x48\x85\x21\x6d\x30\xd2\x0d\x46\x2b\x18\x6b\x83\xd1\x6e\x30\x56\xc1\x78\x1b\x8c\x75\x83\xb9\x15\xcc\x6f\x83\xb9\xdd\x60\x5e\x05\x13\x6d\x30\xaf\x1b\x8c\x57\x30\xb7\x0d\xc6\xbb\xc1\xfc\x0a\x46\xdb\x60\x7e\x37\x98\xa8\x60\x5e\x1b\x4c\x34\xc1\xcc\xdc\xe4\x7a\xda\x50\x03\x17\x2f\xaf\x3e\xff\xeb\xea\x87\xe7\xaf\xbf\x3b\x5f\xfe\xf9\x6a\xf9\xea\x85\x2d\xae\xc7\x79\x3e\x0b\x06\x03\x63\xd2\xa7\xac\x8f\x11\x0a\xa7\xa8\xaf\xd2\x69\xe0\x79\x9c\xdb\xaf\x4a\x4e\x26\xa1\x54\x27\xb0\x58\x1a\x42\xe8\xc6\x28\x7c\xd2\x8f\xa7\x72\xac\x4d\x5f\x45\x9f\xcc\x4f\x9e\xf4\x55\x62\x4d\x06\x4c\x45\xd8\x93\x38\x74\x43\xea\x49\x25\x7c\xc4\x31\x55\x9a\xb8\x8a\x2a\x2e\x43\x34\xea\xcf\x92\xb1\xd5\x0e\xc7\x4e\x24\x93\xb1\xce\x3e\xdd\x1a\x65\x27\xc0\x3e\xca\x6f\x76\xaa\x9c\xcd\x9c\xc7\x5a\x46\x3a\x73\x46\xf1\x99\x8e\xec\x37\x63\x52\xfb\x1a\x9c\x1a\x9d\x0d\xe2\x24\xd2\x67\x65\x75\xbf\x87\x89\x7f\xc8\xb9\xf8\xc0\xe5\x0c\x1f\x70\x84\x05\xa1\x94\x79\x87\xfc\xf0\x9e\x38\x14\xee\xfb\x8d\xb5\x5e\x86\x6d\xbb\xda\x37\xc2\x56\xf0\xcb\xd2\x77\x60\xf9\xc0\x6b\x0d\x45\x00\x62\xfb\x09\x46\xb0\xa8\xea\xae\x4a\xa4\x56\xba\xfe\xf5\xeb\xeb\x2f\xfe\x80\x6b\xad\x01\x8e\x24\x18\x49\xc7\x2e\xd3\x80\x5c\x9f\xe5\x8e\xcd\xed\x2d\x75\xee\x60\x0a\x10\x09\x10\x0f\x28\xde\x53\xde\x1e\x1a\xc5\x9e\x58\x7c\xf9\xe2\xfa\xf9\x3f\x0d\xf2\xb9\x34\x27\x6b\xf2\xce\x24\x2f\x32\xb3\x1d\x01\x1f\x60\xb4\x0a\x81\x80\x45\x29\x74\xf5\x81\xd5\x21\x28\xba\x35\xac\xfa\x22\xdd\x08\x81\xa3\xe2\x4c\x4d\x74\xe1\xc9\x2c\x8b\xa7\x32\x9b\xdf\xde\x06\x4d\x1e\x51\x51\x2e\xab\xab\x47\xf6\x40\x2a\xd2\x51\xa7\xbf\xc9\xa3\x32\x2a\x37\x9b\xb5\x70\xc5\x16\xf5\x0e\x4f\x5c\xb2\x67\x7e\xbc\x3a\x3f\x75\x6c\xe8\x96\x27\x3a\x79\xaa\x27\xe9\xac\x0c\x8c\x39\x55\x4a\x1b\xb3\xf2\xc6\xcc\xcd\xae\xb8\x60\xeb\x0d\xa2\x7b\xc6\x85\xaf\x5f\x89\x58\x75\xe8\x40\xb0\x2a\xd4\x28\x82\xeb\x2d\x0b\x3b\x98\x01\x4c\x02\xe6\x05\x08\x17\xbf\x1c\x3f\x3a\x3a\xea\x2a\xe5\xaf\x5f\x90\xb6\xa4\xa6\x69\x14\x8f\xe6\xbb\xd4\xb0\x5b\xc4\x78\x1f\x35\x51\xdf\x98\x06\xf5\xdd\x66\x4b\xd4\x9a\xda\xf4\x0e\xa3\xd8\xc8\x70\xa2\x37\x57\x5b\x35\x68\xcc\x03\xea\x16\x49\xda\xa5\xbf\x82\xb4\x5e\x54\xe0\xf8\x54\x26\x93\xd5\xe6\xd6\x18\xc9\x48\x51\xc1\x44\x28\x5d\x21\xc3\x50\xbb\x9e\x46\x2e\x1f\x11\x34\xf2\x7d\xaa\xeb\xd9\x71\xd1\xc3\xfb\x2a\x29\x7b\x21\x46\xe5\x9f\x9d\x02\xab\xec\x0b\x87\x20\x80\xdc\x00\x89\x22\x2b\xcc\xe3\xbe\xcf\xea\x19\x04\xd9\xa5\x50\x64\xb7\x2b\xf6\x02\xec\x57\xc6\x8d\x9d\x73\xb5\x12\xbb\xdb\x9b\x6f\x49\xd6\xe4\xff\x00\x00\x00\xff\xff\x27\xeb\xaa\x31\x77\x0b\x00\x00")

func outMysqlDataDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_outMysqlDataDataSql,
		"out/mysql/data/data.sql",
	)
}

func outMysqlDataDataSql() (*asset, error) {
	bytes, err := outMysqlDataDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out/mysql/data/data.sql", size: 2935, mode: os.FileMode(420), modTime: time.Unix(1609812489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out/mysql/data/data.sql": outMysqlDataDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out": &bintree{nil, map[string]*bintree{
		"mysql": &bintree{nil, map[string]*bintree{
			"data": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{outMysqlDataDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
