// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package data generated by go-bindata.// sources:
// out/mysql/data/data.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outMysqlDataDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6f\x6f\x13\xc9\x19\x7f\x5f\xa9\xdf\x61\x14\xa9\xda\x44\x5a\x3b\xf3\x67\xff\x17\x4e\x5c\x5b\x90\x4e\x42\x54\xea\xdd\xf5\x4d\x5d\x45\xeb\xdd\x4d\xd8\xcb\x7a\x6d\xbc\x36\x38\xb4\x27\x25\x5c\x28\xe4\x94\xf4\xd2\x36\xc0\x11\x52\x28\xed\x11\x22\x5a\x02\xd7\x56\x25\x90\x70\x7c\x98\x7a\x6d\xe7\x15\x5f\xa1\x9a\x99\xf5\xae\xd7\xff\x6a\x07\xac\x13\xc4\x1e\xed\xee\xfc\x9e\x67\x7e\xcf\x6f\x9e\x79\x66\xbc\x1f\x5d\xf8\xf8\xec\x2f\x3e\x01\x1f\x5d\xf8\xe4\xe7\xc0\xb6\x83\x39\xdb\xb5\x2a\x6e\xd1\x37\xcb\x4b\x73\xae\x3f\x5f\x04\xbf\xfc\xf0\xfc\xa7\x67\x3f\x06\xd3\x48\x04\x42\xe3\xf6\xf3\xf0\xaf\xf7\x85\x54\xab\x58\x72\xca\x66\xc5\x99\x33\x59\x37\x41\x04\x50\x04\x70\xe6\xc7\x3f\xfc\xc1\xa8\xc0\x58\x04\x42\xfd\xcd\x7e\x63\xeb\xa5\x90\x6a\xbd\x33\x30\x11\x81\x10\x6e\x3e\x6b\x6e\xed\x09\xa9\xd6\x3b\x03\x4b\x22\x10\x9a\xbb\x2b\x11\x5c\xd2\x7a\x67\x60\x59\x04\xc2\xf1\xd6\x4a\xb8\xbf\x2d\xa4\x5a\x23\x01\x07\x41\x71\xce\x36\x2b\xe6\x5c\xc9\x29\x17\xdc\x20\x70\x8b\x7e\x12\x3c\xc2\xfa\x08\x41\x50\x64\x5c\xbc\xfe\x53\xb8\xb6\xd1\xdc\xda\x6b\xdc\x7c\xd1\xb8\xf5\xbc\xb1\xb1\x4f\xaf\x96\xdc\x60\xce\xf5\xf3\xc5\xaa\x6f\x33\xb7\xd2\xe1\xf8\xd5\x6f\x72\x53\xae\x9d\x9b\x32\x90\xac\x21\x4d\x22\x88\xe8\x92\xa2\x8b\xb9\xa9\xf9\xdc\x94\x91\x9b\xaa\x06\x4e\x79\x8e\xde\x17\x73\x53\x16\xbb\x72\x9a\xb5\x2b\xac\xed\x57\x0b\x79\xa7\xcc\x2e\x04\xec\x02\x6b\x5e\x66\xcd\x33\xb4\x2b\xed\xf9\xf9\xaf\x99\x6f\xbb\xd7\x1a\xf7\x77\x3a\x3d\x74\xed\xfa\xc1\x2b\x03\x13\x11\x80\xe6\xd6\x83\xc6\xcd\x4d\x30\x1d\x59\x3b\x8d\xc9\x4c\xce\x8f\x00\xc0\x7f\x97\x97\x5b\x6f\xee\xd6\x0f\x9e\x84\x5f\x5d\x6b\xdc\x7a\x5e\x3f\xd8\x68\xed\xae\xb4\x6e\x3c\x09\x5f\x7c\xdb\x7a\xfc\xb7\xc6\xfd\x4d\xb1\xf5\xe6\x6e\xeb\xbb\x97\xf5\xa3\xed\xe6\xe1\x83\xfa\xc1\x32\xbf\x2a\x8c\xcb\xa5\xd4\x8f\xcb\xc3\xd5\xe6\xf6\xea\x70\x2e\xfb\xb1\x88\x35\xac\xea\xf8\x7d\xb0\x58\x2e\x7a\x4e\x9b\x43\x3a\x42\xc6\x54\x2a\xd0\x6b\xcb\xe1\xce\x5e\xf3\x70\x75\xba\xf5\xf8\x8f\xad\xb5\x7f\xce\x34\xb7\x57\xf9\x9d\xfa\x9b\x87\x8d\x95\x67\x22\x68\xbd\xd9\x0a\xef\xdd\x0f\x2e\x79\x46\xcc\x30\x70\x7d\x3a\xf5\xb1\x28\x2b\xa2\xaa\xcd\x50\xb6\xa9\x21\x90\x22\xfa\xe5\x83\xc6\xd7\xcf\xc2\x7b\xaf\xc2\xfd\x6d\x7e\xe5\xed\xd1\xfa\xfb\xa1\x5a\x4e\x53\xbd\x7e\x3d\xdc\xfc\xfb\x74\xfd\x60\x83\xb7\x66\x1a\xb7\x9e\x87\x4f\xef\x0c\xe2\xbb\xf9\x70\xbf\xb5\xff\x4d\x9b\x75\x4e\x70\xa9\x5c\xb4\xab\x56\x25\xcd\xb1\xeb\x8f\x48\x32\x25\x82\xe4\xa6\x3e\x17\x63\xbc\xc0\xf1\xbc\xee\x90\xf9\xc5\x0a\x18\x0e\x69\xfa\x76\x27\x2a\x14\x11\x16\x91\x12\x01\xb7\xe5\x81\x91\xae\x20\xac\x28\xb2\x14\xcb\x63\x64\x61\x74\x19\xe8\x8f\xac\x49\xca\x64\x90\x55\xa4\xe1\x09\x21\x13\x3c\x29\x9f\x25\x6d\x52\xc8\xca\xc4\x78\xd6\xe0\xa4\x90\x75\x65\x42\xc8\x1a\x9a\x54\x04\x35\x3c\xa9\x08\x6a\x92\xaa\x4d\x08\x59\xc1\x13\x9a\x29\x9a\x3a\xa9\x39\xa8\xe9\x64\x42\x19\x49\x87\x2a\x9c\x10\x32\x9e\xd4\x1c\xd4\x89\x3e\x21\x6d\xe8\x8a\x2c\x4f\x08\x59\x53\xde\x8b\x36\x58\xad\xc1\x0b\x8d\xe6\xf6\x6a\x70\xc9\xa3\x75\x1a\xc8\xf9\xd3\xb5\x5a\x36\x59\x68\xe3\x12\x82\xcc\x00\xd3\xb7\x41\xad\x96\x8d\x57\x4d\xc0\xd7\xca\xe9\xf6\x12\x38\x33\x33\x76\x89\xa0\x0c\x2f\x11\xc2\xa7\x77\x9a\xff\xd8\x1d\xa7\x24\xd3\x20\x56\x48\x12\xd3\xa0\x5a\x2a\x79\xae\x53\x9e\xf3\x8b\x83\x4a\x86\xa0\x52\x76\xfd\x85\xfe\x25\xc3\xd5\xda\xd2\x9c\x65\x8b\xf4\xeb\x52\xad\x2b\x1a\xcc\x9a\x2c\xeb\x52\x62\xcd\xba\x68\xfa\xbe\xe3\xa5\x8d\xf5\x14\x14\x3d\x06\xd3\xb1\xa1\xc6\xec\xab\x3d\xc5\x60\x14\x20\x1e\x9f\x8e\x61\xb1\x00\xe5\x04\xee\x69\x4e\x10\x79\xf3\x52\x2d\x27\xc4\x01\x4b\xdc\x8a\x22\xd6\xee\x60\x5f\xcd\x09\x27\x08\x9a\x9a\x0e\xda\x8b\x5d\xcf\x5d\x74\xc6\x0f\x95\xae\xeb\x48\x61\xe4\xb9\x8e\x67\xcf\xf9\x66\xc1\xe1\x84\xb1\x06\xe5\xaf\x58\x28\x99\x65\x67\x2e\x58\x2a\xe4\x8b\x1e\xbb\x47\x2d\xb1\x7b\xbc\x4f\x65\xa9\xe4\x74\x73\x6a\x15\x7d\xcf\xf5\x17\x3b\x7b\x71\x76\x4d\xaf\xca\x1f\xae\x1f\x3c\x4d\xeb\x3f\xc5\x2d\x35\x0f\xa8\x1d\x90\x13\xea\x07\x4f\x7f\x94\x13\xc6\x67\x48\x4b\x31\x74\xbc\xbc\xdd\xdc\xda\x6b\x3d\x5e\x0d\x6f\xde\x1d\x83\x20\x09\xea\x0a\x96\xe4\x5e\x82\xba\xcb\xe0\x5e\x9a\x4e\xf7\xe3\xa8\x23\x27\xfc\x7f\x8e\x10\xec\x95\xbb\x84\x90\x46\x54\xd2\xeb\x50\xb7\xee\x7b\x1d\x3a\xf5\xc1\xf8\x51\x8b\xa7\x45\xec\xd4\xe0\xa9\x61\xf4\xe4\xad\xd3\x00\xc1\x3e\x13\xe0\xd4\x07\xa0\x43\xfb\x63\x07\x56\x4f\x4b\x9f\xed\x97\xc2\xf5\xdb\x63\x6f\x1d\x25\x45\x52\x35\x2c\xf5\x52\xd9\xb5\x25\x99\x44\x68\xcf\x74\xd8\xe8\x09\xb1\xa2\x23\x45\xd5\xbf\xbf\x10\x9f\xe9\x34\x14\x9d\x29\x2c\x1f\x1d\xdf\x58\x0f\xbf\x7a\x56\x3f\x7c\x74\x7c\x7d\xa3\xf9\x7a\x9f\xee\x8d\x19\xf5\x20\xdc\xbd\x06\x92\xf1\x88\x00\x4c\x47\xe7\x09\x22\xdf\xe9\x36\x76\xd6\x9a\x6b\x2f\x1b\xfb\x5f\x36\x96\x1f\xbf\x3d\x5a\x6f\xde\xfb\x77\xe3\xf7\x8f\x9a\x5b\x7b\xe1\xf3\x6f\x39\xe0\xdb\xa3\x75\x7e\xd4\x10\xee\xec\x05\xf6\x62\xfd\xe0\x69\xfd\xe8\x2f\x1c\x7c\x46\x04\xe1\xf5\xff\xd4\x0f\x6f\xb7\x6e\x3c\x09\xf7\xb7\xeb\x2f\xd7\xf8\xf5\xe3\x9d\xe5\xd6\xee\x0a\x7d\xec\xfa\xa3\x48\x01\xcb\x47\x39\x3f\xe7\x23\x03\x84\x2b\x37\xc2\xdd\x6b\x09\x50\xfb\x09\xb6\xb6\x76\x78\x6a\x00\x04\x45\x00\x3a\x46\x0b\x4e\x83\x48\x96\x3e\x36\x40\xcf\xba\x3c\x9d\x5a\x78\x47\x15\x37\x1a\x47\xdc\x18\xa6\xc4\x5d\x71\xcc\x0a\xfd\xb6\x6d\xbb\xaf\x88\x75\x4c\x74\x19\x69\xfc\xfc\x23\x2d\x16\xdb\x1e\x28\xdf\x53\xef\xae\x5f\x86\xce\xa5\xc1\x5c\xeb\x3b\x83\x69\xf4\xd9\x48\xfb\x0c\x54\xe1\xe7\x69\x50\x04\xed\x93\x35\x0c\x31\xcc\x20\x9c\x21\x10\x20\x68\x20\xc5\x20\xaa\x30\x36\xaa\x14\xa3\x4a\xef\x11\x55\x8e\x51\xd5\x13\xa0\xa6\x0e\x28\x69\xef\xe6\xfe\xc3\xe6\xe6\xef\xc2\x3f\x7c\x2d\xb4\xd1\x90\x96\x51\x32\x58\x05\x90\x18\x50\x31\x64\x69\x30\x58\xc1\xf1\xab\x89\x5a\x54\x45\x89\x5d\x63\xff\x29\x96\x4e\x3d\x43\x2a\x40\x92\x41\x90\x41\xc8\x20\x0d\xf6\xc5\x53\x63\xbc\xa1\x80\x78\x64\x40\x2d\x01\x1c\x8a\x48\x46\x46\xd4\x93\x18\x23\x0c\x87\x61\x4a\xa3\x62\xaa\xb0\x13\x73\xa8\x9f\xf2\xc8\x98\x28\xc1\xc4\x94\xd7\xc1\x98\xca\xc8\x98\x38\x61\x13\x0f\x43\x54\x47\x46\x4c\xe6\xe1\x50\x40\x6d\x64\xc0\x64\x0a\x0e\x27\x52\xef\x87\x18\x2c\x05\x15\xa7\xd0\x67\xca\xf0\x03\xd8\x3f\x7f\x71\x7c\x77\xb3\xf9\xaf\xc3\xe6\xe1\x03\x9a\x7a\x2e\x56\x2a\x25\x63\x76\x16\xe9\x38\x8b\x14\x2d\x0b\xb3\x88\x68\x86\xa2\xa8\xea\x6c\x10\x14\x2d\xd3\xf3\xf2\xa6\xb5\x28\x30\x27\x08\x84\x30\xe9\x91\xff\x2c\xeb\x16\xcc\x05\x27\xc8\x5a\xf6\xa5\xa5\xc5\xcf\xb2\x96\x4f\xbb\xcc\x4a\x96\x8d\x14\x13\xe5\xe5\x3c\x51\x4c\x4b\xd7\xa0\x8a\x88\xe5\x60\xd9\x22\x96\x6a\xe6\xe1\x7c\xb6\xe4\x2f\x50\xc3\xf9\x85\x8c\x6d\xfa\x0b\x4e\xf9\xb7\x5d\xad\xf2\x22\xa0\x1f\xd1\x35\xfa\xa8\x59\x2a\x65\x2e\x3a\xa6\xed\x94\x33\xf3\x6e\xcd\x61\x79\x3c\xca\xee\xb3\x74\x99\x9c\x75\x7d\xdb\xa9\x45\x99\xe0\x27\x08\x6b\xe7\x54\x55\xff\x99\xac\x4a\xe8\xac\x0a\x69\x82\x27\x92\x72\x4e\x3d\xf7\xa1\x7e\x4e\x97\x7f\xda\x37\x2f\x44\x9c\xa5\xe2\x80\xba\x38\x13\x3a\xd2\x84\x90\x11\xa2\x0f\xd4\x91\x7c\x74\x80\x10\x4d\x3e\x08\xd2\xe9\x3d\x20\x65\xf4\x35\x95\xd8\xe2\xc7\xe2\x1c\x18\x32\x14\x61\xde\x04\xf3\x66\x86\x0e\x34\x00\x15\xa7\x56\xc9\xb4\x0b\xb2\x94\x7d\x35\x83\x08\x80\xd8\x80\xaa\x41\xd0\xb8\xf6\xa9\x19\xae\x89\xf0\xcb\x07\xad\x2f\x5e\xf7\xb1\x5f\x31\x83\xc5\x0e\xfb\x19\xaf\xc2\x83\xd3\x4d\x82\x46\xd3\x39\x25\x41\xa7\x19\x69\x2c\x12\x12\x16\x78\x7a\x17\x78\x0a\x85\x0c\xa7\x83\x86\x8c\xe5\x96\x2d\xcf\xe1\xce\x94\xca\x6e\xc1\x2c\x2f\xf5\x8a\xa1\x9f\x53\x44\xe7\x37\xc6\x70\x8a\x32\xc0\x83\x12\xcb\xa0\xaf\x53\x11\x37\x89\x6a\xb9\x37\x74\x7e\x0f\x70\x46\xc6\x63\x87\x09\xc5\x71\x4a\x18\xc2\x5d\xce\x38\xfe\x65\xc7\x2b\x96\x22\x7a\x82\xaa\x65\x39\x41\xc0\x1c\x0a\x96\x82\x41\xec\x30\xdd\x42\x32\x2e\x3b\x12\xc4\x8a\x08\x84\x5a\x2d\xbc\x79\xa7\xf5\x70\x8f\x76\x97\x20\x96\x63\x8f\x00\xb3\x5b\x70\xca\xf4\x8f\x56\x78\x95\xd9\x48\xbc\x71\x52\x53\x33\x98\xb0\x0a\x00\x19\xb2\xca\x6f\x5c\xf8\xf4\xfc\xf9\x71\x5c\x50\x69\x8e\x30\x87\xb9\x10\xe5\xac\x2b\x57\xae\x64\xf3\xa6\x6b\x57\xb3\x56\xb1\xd0\xd7\x09\x6c\x40\x85\x47\x65\x4c\x27\x08\xc5\x0a\x37\x1e\x36\x1e\xbf\x4e\x42\x23\x41\x02\xfb\x3a\xd2\x4e\xb7\x08\x2a\x59\xa4\x4a\x86\x06\x35\x75\xd6\xa9\x55\x9c\xb2\x6f\x7a\xb3\xf6\x65\x6b\x36\xf0\x8a\x31\x57\x30\x71\x93\x20\xea\x26\x86\x06\x46\x27\xe2\x8a\x50\x4f\x5a\xfb\xdf\x85\xdf\xdc\xe0\x3f\xb8\x45\x6e\xe2\x78\xb6\x83\xae\x49\xdd\x61\x15\x19\x48\x3b\x99\x55\x89\xee\x73\x0f\x0e\x1b\x3b\xaf\x52\x56\x49\x97\x74\x4d\x7f\xc1\x73\x32\x76\xb1\x9a\x67\x5f\x57\xfc\x1e\x0d\x0f\xe3\x8f\xd2\x46\x4b\xf5\x6a\x85\x65\x81\x6e\x99\xc5\x83\x90\xc8\xc9\x06\x21\xc7\x11\x9e\xe0\x20\x06\x8a\xa0\x77\x24\xd8\x80\xfa\x89\xb4\x2a\x51\x67\x11\x42\x7c\x00\x12\x4e\x4b\x94\xdf\x88\x35\xa7\xb1\xa9\x81\x0c\xac\xf1\x75\x6d\x6c\xe2\x58\x81\x99\xbc\xab\x81\xa2\xec\x29\xb5\xed\x99\x6c\xf7\x93\x14\x39\x28\x83\x24\x80\xb0\x21\x29\x06\x3c\x91\xc8\x79\x9a\x8c\x5f\x1a\xe8\x31\x58\x28\xda\xee\xfc\xd2\x20\x9b\x48\x3e\x09\xa7\xac\x3a\x8d\x5e\xef\x98\x8d\x5f\xc6\xe8\x31\x4d\x01\xd8\x8f\xda\xb6\x1b\x98\x79\xcf\x49\x8f\xbc\x5d\xde\x21\xd5\x20\x32\x5f\x3d\x07\x79\xc1\x7f\x19\x4f\xbd\x1a\x03\x25\xa9\x7b\x67\x24\x2c\x54\x4d\xdf\x63\x6b\xa3\x83\xa0\x69\x5b\x44\x97\xf4\xbc\x29\xeb\x66\x3e\xef\xc8\x8a\x03\x65\x75\x1e\xc3\x79\x4d\x23\x4e\xf2\xf4\x19\x04\x61\xbe\x90\xb5\xa2\x57\x3c\x04\x24\x6b\x10\x61\xf6\xaf\xbd\x81\x66\x0b\x87\x9e\xc1\x10\x40\xd9\x80\x3a\x8f\x93\xa4\xa8\x9a\x26\xc5\x4f\x74\xed\xee\x58\xe6\x10\x90\xa4\x69\x0c\x65\xc1\x0c\x82\x8a\xc9\x5e\x24\x19\x38\x3c\x76\xf2\x11\x57\xc5\x0a\xd1\x45\x10\x0d\x32\xaa\xc3\x68\xcf\xff\x05\x00\x00\xff\xff\x04\xc3\x99\xf5\x3a\x24\x00\x00")

func outMysqlDataDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_outMysqlDataDataSql,
		"out/mysql/data/data.sql",
	)
}

func outMysqlDataDataSql() (*asset, error) {
	bytes, err := outMysqlDataDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "out/mysql/data/data.sql", size: 9274, mode: os.FileMode(420), modTime: time.Unix(1609314369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"out/mysql/data/data.sql": outMysqlDataDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"out": &bintree{nil, map[string]*bintree{
		"mysql": &bintree{nil, map[string]*bintree{
			"data": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{outMysqlDataDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
